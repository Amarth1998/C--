Q1: What is C++?
A1: C++ is a general-purpose programming language that is an extension of the C programming language.
 It supports object-oriented programming (OOP) principles, as well as low-level memory manipulation.

Q2: What are the basic data types in C++?
A2: C++ provides several built-in data types, including int, float, double, char, bool, and void. These types represent integers, 
floating-point numbers, characters, boolean values, and empty values, respectively.

Q3: What is the difference between "cout" and "cin"?
A3: "cout" is used for standard output and is used to display output on the console. "cin" is used for standard input
 and is used to accept input from the user via the console.

Q4: How do you declare and define a variable in C++?
A4: To declare a variable, you specify the data type followed by the variable name. 
For example, int age;. To define a variable, you assign a value to it, such as int age = 25;.

Q5: What is a function in C++?
A5: A function is a block of code that performs a specific task.
It allows you to organize code into reusable modules. In C++, functions have a return type, a name, and can have parameters.

Q6: What is function overloading?
A6: Function overloading refers to having multiple functions with the same name but different parameters or argument types.
The appropriate function is selected based on the arguments passed during the function call.

Q7: What is a class in C++?
A7: A class is a user-defined data type that encapsulates data and methods into a single unit.
It serves as a blueprint for creating objects. Objects are instances of a class that can access its member variables and functions.

Q8: What is inheritance in C++?
A8: Inheritance is a feature of object-oriented programming that allows a class to inherit properties and methods from another class.
It facilitates code reuse and supports the concept of hierarchical relationships among classes.

Q9: What is the difference between a pointer and a reference in C++?
A9: A pointer is a variable that stores the memory address of another variable. 
It can be manipulated directly to access and modify the data it points to.
A reference, on the other hand, acts as an alias to an existing variable and provides an alternative name for it.

Q10: What is the difference between "new" and "malloc" in C++?
A10: "new" is an operator in C++ used to dynamically allocate memory for objects and automatically calls the object's constructor. 
"malloc" is a function inherited from C and is used to allocate memory for a specified number of bytes but does not call constructors 
or destructors.
======================================================================================================================================

Q4: What is a class in C++?
A4: A class is a user-defined data type that encapsulates data and functions into a single unit.
 It serves as a blueprint for creating objects, which are instances of a class. Classes allow the implementation of
 object-oriented concepts such as encapsulation, inheritance, and polymorphism.

Q5: What is an object in C++?
A5: An object is an instance of a class. It represents a real-world entity or concept.
 Objects have state (data) and behavior (methods/functions) associated with them. For example, a class called "Car" could have objects
 representing individual cars, each with its own set of data (such as color, model, and speed) and methods (such as accelerate and brake).

Q6: What is inheritance in C++?
A6: Inheritance is a feature of object-oriented programming that allows a class to inherit the properties (data and methods) of 
another class. The class that is being inherited from is called the base class or parent class, and the class that inherits is called
 the derived class or child class. Inheritance promotes code reusability and supports the "is-a" relationship.


Q8: What is exception handling in C++?
A8: Exception handling is a mechanism in C++ to deal with runtime errors or exceptional situations that may occur during program execution.
 It allows you to catch and handle exceptions, preventing the program from crashing. Exception handling involves three keywords: 
try, catch, and throw.

Q9: What is the difference between pass by value and pass by reference in C++?
A9: Pass by value involves making a copy of the argument being passed to a function, 
while pass by reference involves passing the memory address of the argument. With pass by value, any modifications made
 to the parameter inside the function do not affect the original argument. Pass by reference allows modifications to the original
 argument since the function operates directly on its memory location.

Q1: What is the main function in C++?
A1: The main function is the entry point of a C++ program.
It is where the program starts execution.
The main function has a return type of int .

Q2: What is the difference between a compiler and an interpreter?
A2: A compiler translates the entire source code into machine code before executing it,
 while an interpreter translates and executes the code line by line. C++ is primarily a compiled language,
 but some environments may use an interpreter for rapid development and testing.

Q3: What is function overloading?
A3: Function overloading is a feature in C++ that allows you to define multiple functions
 with the same name but different parameter lists. 
The compiler determines which function to call based on the arguments provided during the function call.

Q4: What is a constructor?
A4: A constructor is a special member function of a class that is automatically
called when an object of the class is created.It is used to initialize the object's data members or perform
any necessary setup. Constructors have the same name as the class and do not have a return type.


Q5: What is a destructor?
A5: A destructor is a special member function of a class that is automatically called when an object
 is destroyed or goes out of scope. It is used to perform any cleanup or deallocation tasks, such as releasing dynamically
 allocated memory. Destructors have the same name as the class preceded by a tilde (~).

Q6: What is function overriding?
A6: Function overriding is a feature of inheritance in C++ where a derived class provides its own implementation of a function
 that is already defined in the base class. The function in the derived class must have the same name, return type, and parameters
 as the base class function.

Q7: What is the difference between stack and heap memory?
A7: Stack memory is used for storing local variables and function call information.
 It is managed by the compiler and is automatically allocated and deallocated as functions are called and return.
 Heap memory is used for dynamic memory allocation and deallocation .

Q8: What is the difference between const and constexpr in C++?
A8: The const keyword is used to declare variables that cannot be modified after initialization.
 The constexpr keyword is used to declare values that can be computed at compile-time and are required to be constant expressions.

Q9: What is the scope resolution operator (::) used for?
A9: The scope resolution operator (::) is used in C++ to access variables, functions, or classes defined in a different scope.
 It allows you to specify the namespace, class, or base class from which you want to access a particular entity.

Q10: What is a reference variable in C++?
A10: A reference variable in C++ is an alias for an existing variable.
 It is declared using the ampersand (&) symbol and must be initialized with an existing variable.
 Changes made to the reference variable affect the original variable, and it cannot be re-assigned to refer to a different variable.

Q11: What is operator overloading?
A11: Operator overloading is a feature in C++ that allows operators to be redefined for user-defined types.
 It enables you to define the behavior of operators like +, -, *, /, etc., when used with objects of a class.

Q12: What are virtual functions in C++?
A12: Virtual functions are member functions in a base class that are intended to be overridden by derived classes.
 They allow late binding or dynamic polymorphism, where the appropriate function to call is determined at runtime based on the actual
 object type.

Q13: What is a static member variable in C++?
A13: A static member variable is a class-level variable that is shared among all instances of the class.
It is declared with the static keyword and is independent of any specific object.
All instances of the class have access to and share the same static member variable.

Q14: What is a namespace in C++?
A14: A namespace is a declarative region that provides a scope for the identifiers (variables, functions, classes, etc.) it contains.
It is used to organize code and prevent naming conflicts. The namespace keyword is used to define a namespace.

Q15: What is the difference between a shallow copy and a deep copy?
A15: A shallow copy copies the values of the data members from one object to another,
 including any pointers. This means that both objects will point to the same memory location,
 leading to potential issues. A deep copy creates new memory for the copied object, including copies of dynamically allocated data.

Q16: What are inline functions in C++?
A16: Inline functions are small functions in C++ that are expanded at the point of their call,
instead of being called like regular functions.
They are typically defined within the class declaration or declared with the inline keyword.
 Inline functions can provide performance improvements by eliminating function call overhead.

Q17: What is the ternary operator in C++?
A17: The ternary operator (?:) is a conditional operator in C++ that takes three operands. 
It is used as a shorthand for an if-else statement. The syntax is: condition ? expression1 : expression2. 
If the condition is true, expression1 is evaluated; otherwise, expression2 is evaluated.

Q18: What is the difference between a pointer and a reference in C++?
A18: A pointer is a variable that stores the memory address of another variable,allowing indirect access.
 Pointers can be reassigned and can point to null (nullptr). A reference is an alias for an existing variable and 
must be initialized with a variable. Once initialized, a reference cannot be reassigned to refer to a different variable.

Q19: What is function hiding in C++?
A19: Function hiding occurs when a derived class defines a function with the same name as a function in the base class,
 but the function in the derived class does not have the same signature.
 The function in the base class is hidden and cannot be accessed directly through objects of the derived class.

Q20: What are friend functions in C++?
A20: Friend functions are non-member functions that have access to the private and protected members of a class.
They are declared within the class with the friend keyword.
Friend functions can be useful when you need to allow external functions to operate on the private data of a class.



Q22: What is the difference between new and malloc in C++?
A22: The new operator is used for dynamic memory allocation in C++, while malloc() is a function from the C library.
new calls the constructor for an object, if applicable, while malloc() simply allocates memory. new returns a pointer to the allocated 
object, while malloc() returns a void pointer (void*).

Q23: What is the preprocessor in C++?
A23: The preprocessor in C++ is a phase of the compilation process that performs text manipulation before the actual compilation starts.
It processes directives starting with a hash symbol (#), such as #include for including header files, #define for defining macros, and #ifdef/#endif for conditional compilation.

Q24: What is the difference between stack-based and heap-based objects?
A24: Stack-based objects are allocated on the stack and have automatic storage duration. They are created when a function is called and destroyed when the function returns. Heap-based objects are allocated using dynamic memory allocation (e.g., new), have manual storage duration, and must be explicitly deallocated (e.g., delete).

Q25: What is the const keyword used for in C++?
A25: The const keyword is used to declare variables that are read-only and cannot be modified after initialization. It is also used to specify that a member function does not modify the state of the object (const member function). Additionally, const can be used to create constant references or pointers.

Q26: What is a pure virtual function in C++?
A26: A pure virtual function is a virtual function in a base class that is declared with the virtual keyword and assigned the value 0 (zero) in its declaration. It is used to define an interface that must be implemented by derived classes. A class containing a pure virtual function is called an abstract class, and objects of abstract classes cannot be instantiated.

Q27: What is the difference between public, private, and protected access specifiers in C++?
A27: Public, private, and protected are access specifiers used in class definitions. Public members are accessible from anywhere. Private members are only accessible within the class itself. Protected members are accessible within the class and its derived classes.

Q28: What is the difference between a shallow copy constructor and a deep copy constructor?
A28: A shallow copy constructor creates a new object by copying the values of the data members from another object, including any pointers. This results in two objects pointing to the same memory location. A deep copy constructor creates a new object and copies the values of the data members, including creating copies of dynamically allocated data to ensure independent memory.

Q29: What is the purpose of the this pointer in C++?
A29: The this pointer in C++ is a special pointer that holds the memory address of the current object. It is used to refer to the members of the current object within member functions when there is a need to disambiguate between member variables and parameters with the same name.

Q30: What are the access specifiers for inheritance in C++?
A30: In C++, the access specifiers for inheritance are public, private, and protected. They specify how the derived class inherits the base class members. Public inheritance allows public members of the base class to be accessible as public members of the derived class. Private inheritance makes all base class members private in the derived class, and protected inheritance makes them protected.

Q31: What is a function pointer in C++?
A31: A function pointer in C++ is a variable that stores the memory address of a function. It allows you to treat functions as data and pass them as arguments to other functions or store them in data structures. Function pointers are useful for implementing callbacks and runtime function invocation.

Q32: What is dynamic polymorphism in C++?
A32: Dynamic polymorphism, also known as runtime polymorphism, is the ability of an object to take many forms based on its actual type at runtime. It is achieved in C++ using virtual functions. When a virtual function is called through a base class pointer or reference, the appropriate derived class function is executed based on the actual object type.

Q33: What is the purpose of the delete keyword in C++?
A33: The delete keyword in C++ is used to deallocate dynamically allocated memory created using the new keyword. It is also used to call the destructor of an object created with the new operator. Failing to delete dynamically allocated memory can lead to memory leaks.

Q34: What is a lambda function in C++?
A34: A lambda function is an anonymous function in C++ that can be defined inline. It allows you to create a function on the fly without explicitly declaring a separate function. Lambda functions are often used as arguments to higher-order functions or for short and concise function definitions.

Q35: What is the typeid operator used for in C++?
A35: The typeid operator in C++ is used to obtain information about the type of an object at runtime. It returns a reference to a type_info object that can be used to compare types or retrieve type information, such as the type name.

Q36: What is the difference between struct and class in C++?
A36: In C++, struct and class are keywords used to define user-defined data types. The main difference is that members of a struct have a default access specifier of public, while members of a class have a default access specifier of private. Other than that, struct and class can be used interchangeably with similar functionality.

Q37: What is an abstract class in C++?
A37: An abstract class is a class that cannot be instantiated and is meant to be used as a base class.
 It contains at least one pure virtual function and is used to define an interface that derived classes must implement. 
Abstract classes are also known as pure virtual base classes.





Q40: What is the difference between a static member function and a non-static member function in C++?
A40: A static member function in C++ is associated with the class itself rather than with individual objects of the class. 
It can be called using the class name and does not have access to non-static members. Non-static member functions are called on
 specific objects and have access to both static and non-static members.


Q42: What is a namespace alias in C++?
A42: A namespace alias in C++ allows you to create an alias or shorter name for a namespace. 
It can be useful to avoid name conflicts or simplify code readability.
 The namespace keyword is followed by the alias name, an equal sign, and the original namespace name, 
like this: namespace alias = original_namespace;






Q48: What is a local class in C++?
A48: A local class in C++ is a class that is defined inside a function or a code block.
It has limited visibility and can only be accessed within the scope in which it is defined. Local classes are often 
used when a class is needed only within a specific function or block.

Q49: What is the difference between a structure and a class in C++?
A49: In C++, a structure and a class are very similar and share most features.
The main difference is that members of a structure have a default access specifier of public,
while members of a class have a default access specifier of private.
However, in modern C++, the distinction between structures and classes is often minimal.

